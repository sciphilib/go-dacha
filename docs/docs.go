// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/ads": {
            "get": {
                "description": "Retrieves a list of all advertisements with detailed information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "advertisements"
                ],
                "summary": "Get all ads",
                "responses": {
                    "200": {
                        "description": "An array of advertisement objects",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.AdResponse"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "description": "Adds a new advertisement with the given details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "advertisements"
                ],
                "summary": "Add a new advertisement",
                "parameters": [
                    {
                        "description": "Create Ad",
                        "name": "ad",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.AdInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ID of the newly created ad",
                        "schema": {
                            "$ref": "#/definitions/models.AdAdded"
                        }
                    },
                    "400": {
                        "description": "Validation Error",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Failed to create a new ad",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Subcategory/User is not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/ads/{id}": {
            "get": {
                "description": "Retrieve an advertisements by id with detailed information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "advertisements"
                ],
                "summary": "Get an ad by id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Ad ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An advertisement object",
                        "schema": {
                            "$ref": "#/definitions/models.AdResponse"
                        }
                    },
                    "404": {
                        "description": "Ad not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "put": {
                "description": "Update an existing advertisement by its ID with new information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "advertisements"
                ],
                "summary": "Update an advertisement",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Ad ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Advertisement data",
                        "name": "ad",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.AdInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated advertisement",
                        "schema": {
                            "$ref": "#/definitions/models.AdResponse"
                        }
                    },
                    "400": {
                        "description": "Validation Error",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Failed to update the ad",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Ad/Subcategory/User not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes an advertisement by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "advertisements"
                ],
                "summary": "Delete an advertisement",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Ad ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ad deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Ad not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.AdAdded": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                }
            }
        },
        "models.AdInput": {
            "type": "object",
            "required": [
                "category",
                "datetime",
                "location",
                "price",
                "subcategory",
                "title",
                "user_email"
            ],
            "properties": {
                "category": {
                    "type": "string"
                },
                "datetime": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "location": {
                    "$ref": "#/definitions/models.LocationAd"
                },
                "pictures": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "price": {
                    "type": "string"
                },
                "subcategory": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "user_email": {
                    "type": "string"
                }
            }
        },
        "models.AdResponse": {
            "type": "object",
            "properties": {
                "datetime": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "location": {
                    "description": "Предполагается, что Location - это структура с полями type и coordinates",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.LocationAd"
                        }
                    ]
                },
                "pictures": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "price": {
                    "type": "string"
                },
                "subcategory": {
                    "description": "Предполагается, что Subcategory - это структура с полями id, name и category",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.SubcategoryAd"
                        }
                    ]
                },
                "title": {
                    "type": "string"
                },
                "user": {
                    "description": "Предполагается, что User - это структура с полями id, name, email, phone_number, и location",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.UserAd"
                        }
                    ]
                }
            }
        },
        "models.LocationAd": {
            "type": "object",
            "properties": {
                "coordinates": {
                    "description": "Example: [123.45, 67.89]",
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "type": {
                    "description": "Coordinates is an array of two float numbers.",
                    "type": "string"
                }
            }
        },
        "models.SubcategoryAd": {
            "type": "object",
            "properties": {
                "category": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "models.UserAd": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "location": {
                    "$ref": "#/definitions/models.LocationAd"
                },
                "name": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
