// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/ads": {
            "get": {
                "description": "Retrieves a list of all advertisements with detailed information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "advertisements"
                ],
                "summary": "Get all ads",
                "responses": {
                    "200": {
                        "description": "An array of advertisement objects",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.AdResponse"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "description": "Adds a new advertisement with the given details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "advertisements"
                ],
                "summary": "Add a new advertisement",
                "parameters": [
                    {
                        "description": "Create Ad",
                        "name": "ad",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.AdInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ID of the newly created ad",
                        "schema": {
                            "$ref": "#/definitions/models.AdAdded"
                        }
                    },
                    "400": {
                        "description": "Validation Error",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Failed to create a new ad",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Subcategory/User is not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/ads/newest": {
            "get": {
                "description": "Retrieves a list of all advertisements from newest to oldest",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "advertisements"
                ],
                "summary": "Get all ads ordered by date",
                "responses": {
                    "200": {
                        "description": "An array of advertisement objects",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.AdResponse"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/ads/{id}": {
            "get": {
                "description": "Retrieve an advertisements by id with detailed information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "advertisements"
                ],
                "summary": "Get an ad by id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Ad ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An advertisement object",
                        "schema": {
                            "$ref": "#/definitions/models.AdResponse"
                        }
                    },
                    "404": {
                        "description": "Ad not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "put": {
                "description": "Update an existing advertisement by its ID with new information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "advertisements"
                ],
                "summary": "Update an advertisement",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Ad ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Advertisement data",
                        "name": "ad",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.AdInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated advertisement",
                        "schema": {
                            "$ref": "#/definitions/models.AdResponse"
                        }
                    },
                    "400": {
                        "description": "Validation Error",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Failed to update the ad",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Ad/Subcategory/User not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes an advertisement by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "advertisements"
                ],
                "summary": "Delete an advertisement",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Ad ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ad deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Ad not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/ads/{user_id}/nearest": {
            "get": {
                "description": "Retrieves a list of all advertisements from near to far from user's location",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "advertisements"
                ],
                "summary": "Get all ads ordered by distance from user's location",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of advertisement objects",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.AdResponse"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/categories": {
            "get": {
                "description": "Retrieves a list of all categories",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "categories"
                ],
                "summary": "Get all categories",
                "responses": {
                    "200": {
                        "description": "List of categories",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Category"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new category with the provided name",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "categories"
                ],
                "summary": "Create a new category",
                "parameters": [
                    {
                        "description": "Category data",
                        "name": "category",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.CategoryInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Category created",
                        "schema": {
                            "$ref": "#/definitions/models.Category"
                        }
                    },
                    "400": {
                        "description": "Validation Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/categories/{id}": {
            "get": {
                "description": "Retrieves a category by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "categories"
                ],
                "summary": "Get a category by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Category ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Category found",
                        "schema": {
                            "$ref": "#/definitions/models.Category"
                        }
                    },
                    "404": {
                        "description": "Category not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates the name of an existing category by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "categories"
                ],
                "summary": "Update a category",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Category ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated category data",
                        "name": "category",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.CategoryInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Category updated",
                        "schema": {
                            "$ref": "#/definitions/models.Category"
                        }
                    },
                    "400": {
                        "description": "Validation Error",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Category not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes an existing category by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "categories"
                ],
                "summary": "Delete a category",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Category ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Category successfully deleted"
                    },
                    "404": {
                        "description": "Category not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/subcategories": {
            "get": {
                "description": "Retrieves a list of all subcategories with their categories",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "subcategories"
                ],
                "summary": "Get all subcategories",
                "responses": {
                    "200": {
                        "description": "List of subcategories",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.SubcategoryResponse"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new subcategory within a category",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "subcategories"
                ],
                "summary": "Create a new subcategory",
                "parameters": [
                    {
                        "description": "Subcategory creation data",
                        "name": "subcategory",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.SubcategoryInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Subcategory created",
                        "schema": {
                            "$ref": "#/definitions/models.Subcategory"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON payload or validation error",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Unknown category",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/subcategories/{id}": {
            "get": {
                "description": "Retrieves a subcategory by its ID including category name",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "subcategories"
                ],
                "summary": "Get a subcategory by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Subcategory ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Subcategory found",
                        "schema": {
                            "$ref": "#/definitions/models.SubcategoryResponse"
                        }
                    },
                    "404": {
                        "description": "Subcategory not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates an existing subcategory by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "subcategories"
                ],
                "summary": "Update a subcategory",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Subcategory ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Subcategory update data",
                        "name": "subcategory",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.SubcategoryInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Subcategory updated",
                        "schema": {
                            "$ref": "#/definitions/models.Subcategory"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON payload or validation error",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Unknown category",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Subcategory not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes an existing subcategory by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "subcategories"
                ],
                "summary": "Delete a subcategory",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Subcategory ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Subcategory successfully deleted"
                    },
                    "404": {
                        "description": "Subcategory not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "description": "Retrieves a list of all users with their locations in GeoJSON format",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get all users",
                "responses": {
                    "200": {
                        "description": "A list of users",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.UserResponse"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/users/authentication": {
            "post": {
                "description": "Authenticates a user and returns a token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Authenticate a user",
                "parameters": [
                    {
                        "description": "User credentials for authentication",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.AuthInputS"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "id, token\" \"ID and token of the authenticated user",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Incorrect password or validation error",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/users/registration": {
            "post": {
                "description": "Creates a new user with the provided information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "User data for registration",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserInputS"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "id, token\" \"ID and token of the newly registered user",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Validation Error",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "put": {
                "description": "Updates details of an existing user by ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update user details",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User data to update",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserUpdateSwagger"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated user details",
                        "schema": {
                            "$ref": "#/definitions/models.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Validation Error",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes a user by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Delete a user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "User successfully deleted"
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "controllers.CategoryInput": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "controllers.SubcategoryInput": {
            "type": "object",
            "properties": {
                "category": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "models.AdAdded": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                }
            }
        },
        "models.AdInput": {
            "type": "object",
            "required": [
                "category",
                "datetime",
                "location",
                "price",
                "subcategory",
                "title",
                "user_email"
            ],
            "properties": {
                "category": {
                    "type": "string"
                },
                "datetime": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "location": {
                    "$ref": "#/definitions/models.LocationAd"
                },
                "pictures": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "price": {
                    "type": "string"
                },
                "subcategory": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "user_email": {
                    "type": "string"
                }
            }
        },
        "models.AdResponse": {
            "type": "object",
            "properties": {
                "datetime": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "location": {
                    "description": "Предполагается, что Location - это структура с полями type и coordinates",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.LocationAd"
                        }
                    ]
                },
                "pictures": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "price": {
                    "type": "string"
                },
                "subcategory": {
                    "description": "Предполагается, что Subcategory - это структура с полями id, name и category",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.SubcategoryAd"
                        }
                    ]
                },
                "title": {
                    "type": "string"
                },
                "user": {
                    "description": "Предполагается, что User - это структура с полями id, name, email, phone_number, и location",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.UserAd"
                        }
                    ]
                }
            }
        },
        "models.AuthInputS": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "models.Category": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "models.LocationAd": {
            "type": "object",
            "properties": {
                "coordinates": {
                    "description": "Example: [123.45, 67.89]",
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "type": {
                    "description": "Coordinates is an array of two float numbers.",
                    "type": "string"
                }
            }
        },
        "models.Subcategory": {
            "type": "object",
            "properties": {
                "category_id": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "models.SubcategoryAd": {
            "type": "object",
            "properties": {
                "category": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "models.SubcategoryResponse": {
            "type": "object",
            "properties": {
                "category": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "models.UserAd": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "location": {
                    "$ref": "#/definitions/models.LocationAd"
                },
                "name": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                }
            }
        },
        "models.UserInputS": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "location": {
                    "$ref": "#/definitions/models.UserLocation"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                }
            }
        },
        "models.UserLocation": {
            "type": "object",
            "properties": {
                "coordinates": {
                    "description": "Example: [123.45, 67.89]",
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "type": {
                    "description": "Coordinates is an array of two float numbers.",
                    "type": "string"
                }
            }
        },
        "models.UserResponse": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "location": {
                    "$ref": "#/definitions/models.UserLocation"
                },
                "name": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                }
            }
        },
        "models.UserUpdateSwagger": {
            "type": "object",
            "properties": {
                "location": {
                    "$ref": "#/definitions/models.UserLocation"
                },
                "name": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
